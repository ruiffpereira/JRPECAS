/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios'
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type {
  GetWebsitesEcommerceOrdersIdQueryResponse,
  GetWebsitesEcommerceOrdersIdPathParams,
  GetWebsitesEcommerceOrdersId404,
  GetWebsitesEcommerceOrdersId500,
} from '../types/GetWebsitesEcommerceOrdersId.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getWebsitesEcommerceOrdersIdQueryKey = (
  id: GetWebsitesEcommerceOrdersIdPathParams['id'],
) => [{ url: '/websites/ecommerce/orders/:id', params: { id: id } }] as const

export type GetWebsitesEcommerceOrdersIdQueryKey = ReturnType<
  typeof getWebsitesEcommerceOrdersIdQueryKey
>

/**
 * @summary Obtém uma encomenda específica pelo ID para o cliente autenticado
 * {@link /websites/ecommerce/orders/:id}
 */
export async function getWebsitesEcommerceOrdersId(
  id: GetWebsitesEcommerceOrdersIdPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetWebsitesEcommerceOrdersIdQueryResponse,
    ResponseErrorConfig<
      GetWebsitesEcommerceOrdersId404 | GetWebsitesEcommerceOrdersId500
    >,
    unknown
  >({
    method: 'GET',
    url: `/websites/ecommerce/orders/${id}`,
    baseURL: 'http://localhost:2001/api',
    ...requestConfig,
  })
  return res.data
}

export function getWebsitesEcommerceOrdersIdQueryOptions(
  id: GetWebsitesEcommerceOrdersIdPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getWebsitesEcommerceOrdersIdQueryKey(id)
  return queryOptions<
    GetWebsitesEcommerceOrdersIdQueryResponse,
    ResponseErrorConfig<
      GetWebsitesEcommerceOrdersId404 | GetWebsitesEcommerceOrdersId500
    >,
    GetWebsitesEcommerceOrdersIdQueryResponse,
    typeof queryKey
  >({
    enabled: !!id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getWebsitesEcommerceOrdersId(id, config)
    },
  })
}

/**
 * @summary Obtém uma encomenda específica pelo ID para o cliente autenticado
 * {@link /websites/ecommerce/orders/:id}
 */
export function useGetWebsitesEcommerceOrdersId<
  TData = GetWebsitesEcommerceOrdersIdQueryResponse,
  TQueryData = GetWebsitesEcommerceOrdersIdQueryResponse,
  TQueryKey extends QueryKey = GetWebsitesEcommerceOrdersIdQueryKey,
>(
  id: GetWebsitesEcommerceOrdersIdPathParams['id'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetWebsitesEcommerceOrdersIdQueryResponse,
        ResponseErrorConfig<
          GetWebsitesEcommerceOrdersId404 | GetWebsitesEcommerceOrdersId500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey =
    queryOptions?.queryKey ?? getWebsitesEcommerceOrdersIdQueryKey(id)

  const query = useQuery(
    {
      ...(getWebsitesEcommerceOrdersIdQueryOptions(
        id,
        config,
      ) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      GetWebsitesEcommerceOrdersId404 | GetWebsitesEcommerceOrdersId500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}
