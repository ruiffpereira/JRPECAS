/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios'
import type {
  QueryKey,
  QueryClient,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query'
import type {
  GetWebsitesEcommerceOrdersQueryResponse,
  GetWebsitesEcommerceOrders500,
} from '../types/GetWebsitesEcommerceOrders.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getWebsitesEcommerceOrdersSuspenseQueryKey = () =>
  [{ url: '/websites/ecommerce/orders' }] as const

export type GetWebsitesEcommerceOrdersSuspenseQueryKey = ReturnType<
  typeof getWebsitesEcommerceOrdersSuspenseQueryKey
>

/**
 * @summary Lista todas as encomendas do cliente autenticado
 * {@link /websites/ecommerce/orders}
 */
export async function getWebsitesEcommerceOrdersSuspense(
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetWebsitesEcommerceOrdersQueryResponse,
    ResponseErrorConfig<GetWebsitesEcommerceOrders500>,
    unknown
  >({
    method: 'GET',
    url: `/websites/ecommerce/orders`,
    baseURL: 'http://localhost:2001/api',
    ...requestConfig,
  })
  return res.data
}

export function getWebsitesEcommerceOrdersSuspenseQueryOptions(
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getWebsitesEcommerceOrdersSuspenseQueryKey()
  return queryOptions<
    GetWebsitesEcommerceOrdersQueryResponse,
    ResponseErrorConfig<GetWebsitesEcommerceOrders500>,
    GetWebsitesEcommerceOrdersQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getWebsitesEcommerceOrdersSuspense(config)
    },
  })
}

/**
 * @summary Lista todas as encomendas do cliente autenticado
 * {@link /websites/ecommerce/orders}
 */
export function useGetWebsitesEcommerceOrdersSuspense<
  TData = GetWebsitesEcommerceOrdersQueryResponse,
  TQueryKey extends QueryKey = GetWebsitesEcommerceOrdersSuspenseQueryKey,
>(
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetWebsitesEcommerceOrdersQueryResponse,
        ResponseErrorConfig<GetWebsitesEcommerceOrders500>,
        TData,
        TQueryKey
      >
    > & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {}
  const queryKey =
    queryOptions?.queryKey ?? getWebsitesEcommerceOrdersSuspenseQueryKey()

  const query = useSuspenseQuery(
    {
      ...(getWebsitesEcommerceOrdersSuspenseQueryOptions(
        config,
      ) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<GetWebsitesEcommerceOrders500>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}
