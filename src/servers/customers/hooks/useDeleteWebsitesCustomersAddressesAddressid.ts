/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  DeleteWebsitesCustomersAddressesAddressidMutationResponse,
  DeleteWebsitesCustomersAddressesAddressidPathParams,
  DeleteWebsitesCustomersAddressesAddressid404,
  DeleteWebsitesCustomersAddressesAddressid500,
} from '../types/DeleteWebsitesCustomersAddressesAddressid.ts'
import { useMutation } from '@tanstack/react-query'

export const deleteWebsitesCustomersAddressesAddressidMutationKey = () =>
  [{ url: '/websites/customers/addresses/{addressId}' }] as const

export type DeleteWebsitesCustomersAddressesAddressidMutationKey = ReturnType<
  typeof deleteWebsitesCustomersAddressesAddressidMutationKey
>

/**
 * @summary Delete an address
 * {@link /websites/customers/addresses/:addressId}
 */
export async function deleteWebsitesCustomersAddressesAddressid(
  addressId: DeleteWebsitesCustomersAddressesAddressidPathParams['addressId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeleteWebsitesCustomersAddressesAddressidMutationResponse,
    ResponseErrorConfig<
      | DeleteWebsitesCustomersAddressesAddressid404
      | DeleteWebsitesCustomersAddressesAddressid500
    >,
    unknown
  >({
    method: 'DELETE',
    url: `/websites/customers/addresses/${addressId}`,
    baseURL: 'http://localhost:2001/api',
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Delete an address
 * {@link /websites/customers/addresses/:addressId}
 */
export function useDeleteWebsitesCustomersAddressesAddressid<TContext>(
  options: {
    mutation?: UseMutationOptions<
      DeleteWebsitesCustomersAddressesAddressidMutationResponse,
      ResponseErrorConfig<
        | DeleteWebsitesCustomersAddressesAddressid404
        | DeleteWebsitesCustomersAddressesAddressid500
      >,
      {
        addressId: DeleteWebsitesCustomersAddressesAddressidPathParams['addressId']
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey =
    mutationOptions.mutationKey ??
    deleteWebsitesCustomersAddressesAddressidMutationKey()

  return useMutation<
    DeleteWebsitesCustomersAddressesAddressidMutationResponse,
    ResponseErrorConfig<
      | DeleteWebsitesCustomersAddressesAddressid404
      | DeleteWebsitesCustomersAddressesAddressid500
    >,
    {
      addressId: DeleteWebsitesCustomersAddressesAddressidPathParams['addressId']
    },
    TContext
  >(
    {
      mutationFn: async ({ addressId }) => {
        return deleteWebsitesCustomersAddressesAddressid(addressId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
