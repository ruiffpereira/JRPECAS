/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  GetWebsitesCustomersBankcardsCustomerCustomeridQueryResponse,
  GetWebsitesCustomersBankcardsCustomerCustomeridPathParams,
  GetWebsitesCustomersBankcardsCustomerCustomerid500,
} from '../types/GetWebsitesCustomersBankcardsCustomerCustomerid.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getWebsitesCustomersBankcardsCustomerCustomeridQueryKey = (customerId: GetWebsitesCustomersBankcardsCustomerCustomeridPathParams['customerId']) =>
  [{ url: '/websites/customers/bankcards/customer/:customerId', params: { customerId: customerId } }] as const

export type GetWebsitesCustomersBankcardsCustomerCustomeridQueryKey = ReturnType<typeof getWebsitesCustomersBankcardsCustomerCustomeridQueryKey>

/**
 * @summary Get all bank cards for a customer
 * {@link /websites/customers/bankcards/customer/:customerId}
 */
export async function getWebsitesCustomersBankcardsCustomerCustomerid(
  customerId: GetWebsitesCustomersBankcardsCustomerCustomeridPathParams['customerId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetWebsitesCustomersBankcardsCustomerCustomeridQueryResponse,
    ResponseErrorConfig<GetWebsitesCustomersBankcardsCustomerCustomerid500>,
    unknown
  >({ method: 'GET', url: `/websites/customers/bankcards/customer/${customerId}`, baseURL: 'http://localhost:2001/api', ...requestConfig })
  return res.data
}

export function getWebsitesCustomersBankcardsCustomerCustomeridQueryOptions(
  customerId: GetWebsitesCustomersBankcardsCustomerCustomeridPathParams['customerId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getWebsitesCustomersBankcardsCustomerCustomeridQueryKey(customerId)
  return queryOptions<
    GetWebsitesCustomersBankcardsCustomerCustomeridQueryResponse,
    ResponseErrorConfig<GetWebsitesCustomersBankcardsCustomerCustomerid500>,
    GetWebsitesCustomersBankcardsCustomerCustomeridQueryResponse,
    typeof queryKey
  >({
    enabled: !!customerId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getWebsitesCustomersBankcardsCustomerCustomerid(customerId, config)
    },
  })
}

/**
 * @summary Get all bank cards for a customer
 * {@link /websites/customers/bankcards/customer/:customerId}
 */
export function useGetWebsitesCustomersBankcardsCustomerCustomerid<
  TData = GetWebsitesCustomersBankcardsCustomerCustomeridQueryResponse,
  TQueryData = GetWebsitesCustomersBankcardsCustomerCustomeridQueryResponse,
  TQueryKey extends QueryKey = GetWebsitesCustomersBankcardsCustomerCustomeridQueryKey,
>(
  customerId: GetWebsitesCustomersBankcardsCustomerCustomeridPathParams['customerId'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetWebsitesCustomersBankcardsCustomerCustomeridQueryResponse,
        ResponseErrorConfig<GetWebsitesCustomersBankcardsCustomerCustomerid500>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getWebsitesCustomersBankcardsCustomerCustomeridQueryKey(customerId)

  const query = useQuery(
    {
      ...(getWebsitesCustomersBankcardsCustomerCustomeridQueryOptions(customerId, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetWebsitesCustomersBankcardsCustomerCustomerid500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}