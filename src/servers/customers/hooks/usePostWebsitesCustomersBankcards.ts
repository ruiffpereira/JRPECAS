/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PostWebsitesCustomersBankcardsMutationRequest,
  PostWebsitesCustomersBankcardsMutationResponse,
  PostWebsitesCustomersBankcards400,
} from '../types/PostWebsitesCustomersBankcards.ts'
import { useMutation } from '@tanstack/react-query'

export const postWebsitesCustomersBankcardsMutationKey = () =>
  [{ url: '/websites/customers/bankcards' }] as const

export type PostWebsitesCustomersBankcardsMutationKey = ReturnType<
  typeof postWebsitesCustomersBankcardsMutationKey
>

/**
 * @summary Create a new bank card
 * {@link /websites/customers/bankcards}
 */
export async function postWebsitesCustomersBankcards(
  data?: PostWebsitesCustomersBankcardsMutationRequest,
  config: Partial<
    RequestConfig<PostWebsitesCustomersBankcardsMutationRequest>
  > & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PostWebsitesCustomersBankcardsMutationResponse,
    ResponseErrorConfig<PostWebsitesCustomersBankcards400>,
    PostWebsitesCustomersBankcardsMutationRequest
  >({
    method: 'POST',
    url: `/websites/customers/bankcards`,
    baseURL: 'http://localhost:2001/api',
    data,
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Create a new bank card
 * {@link /websites/customers/bankcards}
 */
export function usePostWebsitesCustomersBankcards<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostWebsitesCustomersBankcardsMutationResponse,
      ResponseErrorConfig<PostWebsitesCustomersBankcards400>,
      { data?: PostWebsitesCustomersBankcardsMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<
      RequestConfig<PostWebsitesCustomersBankcardsMutationRequest>
    > & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey =
    mutationOptions.mutationKey ?? postWebsitesCustomersBankcardsMutationKey()

  return useMutation<
    PostWebsitesCustomersBankcardsMutationResponse,
    ResponseErrorConfig<PostWebsitesCustomersBankcards400>,
    { data?: PostWebsitesCustomersBankcardsMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return postWebsitesCustomersBankcards(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
