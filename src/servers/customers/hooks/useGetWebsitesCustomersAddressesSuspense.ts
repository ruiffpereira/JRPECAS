/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type { GetWebsitesCustomersAddressesQueryResponse, GetWebsitesCustomersAddresses500 } from '../types/GetWebsitesCustomersAddresses.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getWebsitesCustomersAddressesSuspenseQueryKey = () => [{ url: '/websites/customers/addresses' }] as const

export type GetWebsitesCustomersAddressesSuspenseQueryKey = ReturnType<typeof getWebsitesCustomersAddressesSuspenseQueryKey>

/**
 * @summary Get all addresses for the authenticated customer
 * {@link /websites/customers/addresses}
 */
export async function getWebsitesCustomersAddressesSuspense(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetWebsitesCustomersAddressesQueryResponse, ResponseErrorConfig<GetWebsitesCustomersAddresses500>, unknown>({
    method: 'GET',
    url: `/websites/customers/addresses`,
    baseURL: 'http://localhost:2001/api',
    ...requestConfig,
  })
  return res.data
}

export function getWebsitesCustomersAddressesSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getWebsitesCustomersAddressesSuspenseQueryKey()
  return queryOptions<
    GetWebsitesCustomersAddressesQueryResponse,
    ResponseErrorConfig<GetWebsitesCustomersAddresses500>,
    GetWebsitesCustomersAddressesQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getWebsitesCustomersAddressesSuspense(config)
    },
  })
}

/**
 * @summary Get all addresses for the authenticated customer
 * {@link /websites/customers/addresses}
 */
export function useGetWebsitesCustomersAddressesSuspense<
  TData = GetWebsitesCustomersAddressesQueryResponse,
  TQueryKey extends QueryKey = GetWebsitesCustomersAddressesSuspenseQueryKey,
>(
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<GetWebsitesCustomersAddressesQueryResponse, ResponseErrorConfig<GetWebsitesCustomersAddresses500>, TData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getWebsitesCustomersAddressesSuspenseQueryKey()

  const query = useSuspenseQuery(
    {
      ...(getWebsitesCustomersAddressesSuspenseQueryOptions(config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<GetWebsitesCustomersAddresses500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}